{"version":3,"sources":["candy-machine.ts","media/eye.png","navBar/navBar.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","ms","navBar","frowBetween","display","flexDirection","justifyContent","style","paddingTop","width","href","src","eye","Button","color","background","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","withStyles","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","remainingCount","setRemainingCount","setRedeemedCount","availableCount","setAvailableCount","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useWallet","setCandyMachine","onMint","connected","mintTxId","txTimeout","loadCandyMachineState","msg","code","indexOf","getBalance","balance","LAMPORTS_PER_SOL","signAllTransactions","signTransaction","useEffect","alignItems","marginBottom","fontSize","marginTop","Box","Typography","variant","disabled","onClick","CircularProgress","date","onMount","onComplete","renderer","alt","textAlign","Snackbar","autoHideDuration","onClose","Alert","process","Connection","startDateSeed","parseInt","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","height","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4ce0a35.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\r\n\r\nimport {\r\n  MintLayout,\r\n  TOKEN_PROGRAM_ID,\r\n  Token,\r\n} from \"@solana/spl-token\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\r\n);\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\nexport interface CandyMachine {\r\n  id: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection;\r\n  program: anchor.Program;\r\n}\r\n\r\ninterface CandyMachineState {\r\n  candyMachine: CandyMachine;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  goLiveDate: Date,\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result: any, context: any) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n}\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineState> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"recent\",\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(\r\n    CANDY_MACHINE_PROGRAM,\r\n    provider\r\n  );\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n  const candyMachine = {\r\n    id: candyMachineId,\r\n    connection,\r\n    program,\r\n  }\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  let goLiveDate = state.data.goLiveDate.toNumber();\r\n  goLiveDate = new Date(goLiveDate * 1000);\r\n\r\n  return {\r\n    candyMachine,\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveDate,\r\n  };\r\n}\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getTokenWallet = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  mint: anchor.web3.PublicKey\r\n) => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachine,\r\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\r\n  payer: anchor.web3.PublicKey,\r\n  treasury: anchor.web3.PublicKey,\r\n): Promise<string> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const token = await getTokenWallet(payer, mint.publicKey);\r\n  const { connection, program } = candyMachine;\r\n  const metadata = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const rent = await connection.getMinimumBalanceForRentExemption(\r\n    MintLayout.span\r\n  );\r\n\r\n  return await program.rpc.mintNft({\r\n    accounts: {\r\n      config,\r\n      candyMachine: candyMachine.id,\r\n      payer: payer,\r\n      wallet: treasury,\r\n      mint: mint.publicKey,\r\n      metadata,\r\n      masterEdition,\r\n      mintAuthority: payer,\r\n      updateAuthority: payer,\r\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: anchor.web3.SystemProgram.programId,\r\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n    },\r\n    signers: [mint],\r\n    instructions: [\r\n      anchor.web3.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: mint.publicKey,\r\n        space: MintLayout.span,\r\n        lamports: rent,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      Token.createInitMintInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        0,\r\n        payer,\r\n        payer\r\n      ),\r\n      createAssociatedTokenAccountInstruction(\r\n        token,\r\n        payer,\r\n        payer,\r\n        mint.publicKey\r\n      ),\r\n      Token.createMintToInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        token,\r\n        payer,\r\n        [],\r\n        1\r\n      ),\r\n    ],\r\n  });\r\n}\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}","export default __webpack_public_path__ + \"static/media/eye.c539a7b5.png\";","import React from 'react';\r\nimport eye from '../media/eye.png'\r\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\r\n\r\nconst navBar = () => {\r\n\r\n  const frowBetween = {\r\n    display: 'flex',\r\n    flexDirection: 'row' as any,\r\n    justifyContent: 'space-between',\r\n  }\r\n\r\n  const frowCenter = {\r\n    display: 'flex',\r\n    flexDirection: 'row' as any,\r\n    justifyContent: 'center',\r\n    paddingTop: '50px',\r\n  }\r\n\r\n\r\n  return (\r\n    <div style={frowCenter}>\r\n      <div style={{...frowBetween, width: '70%'}}>\r\n        <div>\r\n          <a href=''>\r\n            <img src={eye} style={{width: '30px'}}/>\r\n          </a>  \r\n        </div>\r\n        <div style={{...frowBetween, width: '25%'}}>\r\n          <Button style={{color: 'white'}} href='https://discord.com/'>Discord</Button>\r\n          <Button style={{background: '#6163ff', color: 'white'}} href='https://twitter.com/'>Twitter</Button>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default navBar;","import { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Countdown from \"react-countdown\";\r\nimport { Box, Button, CircularProgress, Snackbar, Typography } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport eye from './media/eye.png'\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport {\r\n  CandyMachine,\r\n  awaitTransactionSignatureConfirmation,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  shortenAddress,\r\n} from \"./candy-machine\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)``;\r\n\r\nconst CounterText = styled.span``; // add your styles here\r\n\r\nconst MintContainer = styled.div``; // add your styles here\r\n\r\n// const MintButton = styled(Button)`background: #6163ff; color: white`; // add your styles here\r\n\r\nconst MintButton = withStyles({\r\n  // root: {\r\n  //   background: '#6163ff',\r\n  //   color: 'white'\r\n  // }\r\n})(Button)\r\n\r\nexport interface HomeProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  config: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  txTimeout: number;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\r\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n\r\n  const [remainingCount, setRemainingCount] = useState(0)\r\n  const [redeemdedCount, setRedeemedCount] = useState(0)\r\n  const [availableCount, setAvailableCount] = useState(0)\r\n  \r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\r\n\r\n  const wallet = useWallet();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        const mintTxId = await mintOneToken(\r\n          candyMachine,\r\n          props.config,\r\n          wallet.publicKey,\r\n          props.treasury\r\n        );\r\n\r\n        const status = await awaitTransactionSignatureConfirmation(\r\n          mintTxId,\r\n          props.txTimeout,\r\n          props.connection,\r\n          \"singleGossip\",\r\n          false\r\n        );\r\n\r\n        if (!status?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n\r\n          loadCandyMachineState()\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          setIsSoldOut(true);\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      if (wallet?.publicKey) {\r\n        const balance = await props.connection.getBalance(wallet?.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  const loadCandyMachineState = async () => {\r\n    const anchorWallet = {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n\r\n    const { candyMachine, goLiveDate, itemsRemaining, itemsRedeemed, itemsAvailable } =\r\n      await getCandyMachineState(\r\n        anchorWallet,\r\n        props.candyMachineId,\r\n        props.connection\r\n      );\r\n\r\n    setRemainingCount(itemsRemaining)\r\n    setRedeemedCount(itemsRedeemed)\r\n    setAvailableCount(itemsAvailable)\r\n\r\n    setIsSoldOut(itemsRemaining === 0);\r\n    setStartDate(goLiveDate);\r\n    setCandyMachine(candyMachine);\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet?.publicKey) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, props.connection]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (\r\n        !wallet ||\r\n        !wallet.publicKey ||\r\n        !wallet.signAllTransactions ||\r\n        !wallet.signTransaction\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      loadCandyMachineState()\r\n    })();\r\n  }, [wallet, props.candyMachineId, props.connection]);\r\n\r\n  const containerStyles = {\r\n    display: 'flex',\r\n    flexDirection: 'column' as any,\r\n    justifyContent: 'space-evenly',\r\n    alignItems: 'center',\r\n\r\n  }\r\n\r\n  return (\r\n    <main style={containerStyles}>\r\n      {/* {wallet.connected && \r\n      <>\r\n        <p>Address: {shortenAddress(wallet.publicKey?.toBase58() || \"\")}</p>\r\n        <p>Balance: {(balance || 0).toLocaleString()} SOL</p>\r\n      </>  \r\n      } */}\r\n      \r\n      <div style={{display: 'flex', flexDirection: 'row', marginBottom: '5px'}}>\r\n        <h1 style={{color: 'white', fontSize: '42px', marginBottom: '5px', marginTop: '5px'}}>Heroy</h1>\r\n        <h1 style={{color: '#5658dd', fontSize: '42px', marginBottom: '5px',  marginTop: '5px'}}>Demon Punks</h1>\r\n      </div>\r\n\r\n      <h3 style={{color: '#9ca9b3', marginBottom: '20px'}}>100 Demon Punks on the Solana blockchain.</h3>\r\n\r\n      {!wallet.connected && <ConnectButton>Connect Wallet</ConnectButton> }\r\n\r\n      {wallet.connected &&\r\n        <Box marginBottom={2}>\r\n          <Typography variant=\"body1\" style={{ color: '#9ca9b3' }}>Remained {remainingCount} of {availableCount} NFTs</Typography>\r\n        </Box>\r\n    }\r\n\r\n      <MintContainer>\r\n        {wallet.connected && \r\n        <MintButton\r\n          color=\"primary\"\r\n          disabled={isSoldOut || isMinting || !isActive}\r\n          onClick={onMint}\r\n          variant=\"contained\"\r\n        >\r\n          {isSoldOut ? (\r\n            \"SOLD OUT\"\r\n            ) : isActive ? (\r\n              isMinting ? (\r\n                <CircularProgress />\r\n                ) : (\r\n                  \"MINT\"\r\n                  )\r\n                  ) : (\r\n                    <Countdown\r\n                    date={startDate}\r\n                    onMount={({ completed }) => completed && setIsActive(true)}\r\n                    onComplete={() => setIsActive(true)}\r\n                    renderer={renderCounter}\r\n                    />\r\n                    )}\r\n        </MintButton>\r\n        }\r\n      </MintContainer>\r\n\r\n      <img src={eye} style={{ width: '300px', marginTop: '20px' }} alt=\"Heroy\" />\r\n      \r\n      <Box textAlign=\"center\" marginTop={3}>\r\n        <Typography variant=\"caption\" style={{ color: '#9ca9b3' }}>Powered by <strong>Heroy</strong></Typography>\r\n      </Box>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </main>\r\n  );\r\n};\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\r\n  return (\r\n    <CounterText>\r\n      {hours} hours, {minutes} minutes, {seconds} seconds\r\n    </CounterText>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\nimport NavBar from \"./navBar/navBar\";\r\nimport Home from \"./Home\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\n\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nconst treasury = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_TREASURY_ADDRESS!\r\n);\r\n\r\nconst config = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\r\n);\r\n\r\nconst candyMachineId = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_ID!\r\n);\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\n\r\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\r\n    []\r\n  );\r\n\r\n  const container = {\r\n    display: 'flex',\r\n    flexDirection: 'column' as any,\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  }\r\n\r\n  return (\r\n    <div style={{background: 'black', height: '100vh'}}>\r\n      <NavBar />\r\n      <div style={{...container, }}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <div style={{marginTop: '0px'}}>\r\n\r\n           ` <Home\r\n              candyMachineId={candyMachineId}\r\n              config={config}\r\n              connection={connection}\r\n              startDate={startDateSeed}\r\n              treasury={treasury}\r\n              txTimeout={txTimeout}\r\n            />`\r\n            </div>\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n\r\n      </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}